
Menu.elf:     file format elf32-littlenios2
Menu.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000a1c memsz 0x00000a1c flags r-x
    LOAD off    0x00001a3c vaddr 0x00001a3c paddr 0x00001a44 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001a4c vaddr 0x00001a4c paddr 0x00001a4c align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000087c  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  000019fc  000019fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00001a3c  00001a44  00001a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00001a4c  00001a4c  00001a4c  2**2
                  ALLOC, SMALL_DATA
  6 .ram_0        00000000  00001b80  00001b80  00001a44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001bf2  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e90  00000000  00000000  00003912  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000ee7  00000000  00000000  000047a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000304  00000000  00000000  0000568c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e29  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000aff  00000000  00000000  000067b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000072b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  000072c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000085d6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  000085d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000085dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000085de  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000085df  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000085ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000085f5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00008600  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001b  00000000  00000000  00008604  2**0
                  CONTENTS, READONLY
 26 .jdi          00004332  00000000  00000000  0000861f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00080740  00000000  00000000  0000c951  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
000019fc l    d  .rodata	00000000 .rodata
00001a3c l    d  .rwdata	00000000 .rwdata
00001a4c l    d  .bss	00000000 .bss
00001b80 l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Menu_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000011bc l     F .text	0000027c timer_isr
00001a50 l     O .bss	00000004 leds
00001a4c l     O .bss	00000004 count.2576
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001a7c g     O .bss	00000004 alt_instruction_exception_handler
000018a0 g     F .text	0000002c alt_main
00001a80 g     O .bss	00000100 alt_irq
00001a44 g       *ABS*	00000000 __flash_rwdata_start
00001a54 g     O .bss	00000004 hour1
000018cc g     F .text	00000038 alt_putstr
000019d8 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001a74 g     O .bss	00000004 alt_argv
00009a3c g       *ABS*	00000000 _gp
000016a4 g     F .text	00000028 memcpy
00001964 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001a58 g     O .bss	00000004 min1
000015e8 g     F .text	00000064 .hidden __udivsi3
00001b80 g       *ABS*	00000000 __bss_end
00001758 g     F .text	00000068 alt_iic_isr_register
00001a5c g     O .bss	00000004 sec1
00001000 g       *ABS*	00000000 __alt_mem_ram_0
00001740 g     F .text	00000018 alt_ic_irq_enabled
00001a6c g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
0000195c g     F .text	00000004 alt_dcache_flush_all
00001a44 g       *ABS*	00000000 __ram_rwdata_end
00001a3c g       *ABS*	00000000 __ram_rodata_end
00001a40 g     O .rwdata	00000004 jtag_uart_0
0000164c g     F .text	00000058 .hidden __umodsi3
00001b80 g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00001ff8 g       *ABS*	00000000 __alt_stack_pointer
00001928 g     F .text	00000034 altera_avalon_jtag_uart_write
00001180 g     F .text	0000003c _start
00001924 g     F .text	00000004 alt_sys_init
00001a3c g       *ABS*	00000000 __ram_rwdata_start
000019fc g       *ABS*	00000000 __ram_rodata_start
00001b80 g       *ABS*	00000000 __alt_stack_base
00001a4c g       *ABS*	00000000 __bss_start
00001438 g     F .text	000000b8 main
00001a70 g     O .bss	00000004 alt_envp
00001a60 g     O .bss	00000004 min0
00001a64 g     O .bss	00000004 sec0
000014f0 g     F .text	00000084 .hidden __divsi3
000019fc g       *ABS*	00000000 __flash_rodata_start
00001904 g     F .text	00000020 alt_irq_init
00001a78 g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001a68 g     O .bss	00000004 hour0
000016cc g     F .text	00000004 alt_ic_isr_register
00001a44 g       *ABS*	00000000 _edata
00001b80 g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001708 g     F .text	00000038 alt_ic_irq_disable
00001574 g     F .text	00000074 .hidden __modsi3
00001ff8 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
0000100c g       .entry	00000000 _exit
000019e0 g     F .text	0000001c strlen
00001960 g     F .text	00000004 alt_icache_flush_all
00001a3c g     O .rwdata	00000004 alt_priority_mask
000016d0 g     F .text	00000038 alt_ic_irq_enable
000017c0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	8406a004 	addi	r16,r16,6784

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <alt_irq_handler+0x20>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a01017 	ldw	r2,-32704(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec7fe14 	ori	sp,sp,8184
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a68f14 	ori	gp,gp,39484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10869314 	ori	r2,r2,6732

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c6e014 	ori	r3,r3,7040

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00017c00 	call	17c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00018a00 	call	18a0 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <alt_after_alt_main>

000011bc <timer_isr>:
}

static void timer_isr(void *context){
	(void) context;

	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE)&1);
    11bc:	d0a00517 	ldw	r2,-32748(gp)
	*seg4 = 16;
	*seg5 = 79;

}

static void timer_isr(void *context){
    11c0:	defff504 	addi	sp,sp,-44
	(void) context;

	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE)&1);
    11c4:	00cc3804 	movi	r3,12512
    11c8:	1085883a 	add	r2,r2,r2
	*seg4 = 16;
	*seg5 = 79;

}

static void timer_isr(void *context){
    11cc:	dfc00a15 	stw	ra,40(sp)
	(void) context;

	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE)&1);
    11d0:	18c00037 	ldwio	r3,0(r3)
    11d4:	18c0004c 	andi	r3,r3,1
    11d8:	1884b03a 	or	r2,r3,r2
    11dc:	d0a00515 	stw	r2,-32748(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
    11e0:	00cc3c04 	movi	r3,12528
    11e4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    11e8:	008c0804 	movi	r2,12320
    11ec:	10000035 	stwio	zero,0(r2)
	volatile unsigned long * seg5= (short *) 0x3060;

	static int count = 0;

	//Clear the interrupt
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    11f0:	10000035 	stwio	zero,0(r2)
		 * 6 = 2
		 * 7 = 120
		 * 8 = 0011000
		 * 9 = 16
		 */
		int data[] = {1000000, 79, 36, 48, 25, 18, 2, 120, 0011000, 16};
    11f4:	01400034 	movhi	r5,0
    11f8:	d809883a 	mov	r4,sp
    11fc:	01800a04 	movi	r6,40
    1200:	29467f04 	addi	r5,r5,6652
    1204:	00016a40 	call	16a4 <memcpy>

		if (sec0/1000 < 10){
    1208:	d1200a17 	ldw	r4,-32728(gp)
    120c:	0089c3c4 	movi	r2,9999
    1210:	11000a16 	blt	r2,r4,123c <timer_isr+0x80>
			sec0 ++;
    1214:	21000044 	addi	r4,r4,1
			*seg0 = data[sec0/1000];
    1218:	0140fa04 	movi	r5,1000
		 * 9 = 16
		 */
		int data[] = {1000000, 79, 36, 48, 25, 18, 2, 120, 0011000, 16};

		if (sec0/1000 < 10){
			sec0 ++;
    121c:	d1200a15 	stw	r4,-32728(gp)
			*seg0 = data[sec0/1000];
    1220:	00014f00 	call	14f0 <__divsi3>
    1224:	1085883a 	add	r2,r2,r2
    1228:	1085883a 	add	r2,r2,r2
    122c:	d885883a 	add	r2,sp,r2
    1230:	10c00017 	ldw	r3,0(r2)
    1234:	008c2c04 	movi	r2,12464
    1238:	00007806 	br	141c <timer_isr+0x260>
		}else{
			if(sec1 < 5){
    123c:	d0e00817 	ldw	r3,-32736(gp)
    1240:	008003f4 	movhi	r2,15
    1244:	01800104 	movi	r6,4
    1248:	10909004 	addi	r2,r2,16960
    124c:	30c00b16 	blt	r6,r3,127c <timer_isr+0xc0>
				sec0 = 0;
    1250:	d0200a15 	stw	zero,-32728(gp)
				*seg0 = data[sec0];
    1254:	010c2c04 	movi	r4,12464
    1258:	20800015 	stw	r2,0(r4)
				sec1 ++;
    125c:	18800044 	addi	r2,r3,1
    1260:	d0a00815 	stw	r2,-32736(gp)
				*seg1 = data[sec1];
    1264:	1085883a 	add	r2,r2,r2
    1268:	1085883a 	add	r2,r2,r2
    126c:	d885883a 	add	r2,sp,r2
    1270:	10c00017 	ldw	r3,0(r2)
    1274:	008c2804 	movi	r2,12448
    1278:	00006806 	br	141c <timer_isr+0x260>
			}else{
				if(min0 < 9){
    127c:	d0e00917 	ldw	r3,-32732(gp)
    1280:	01c00204 	movi	r7,8
    1284:	010c2c04 	movi	r4,12464
    1288:	014c2804 	movi	r5,12448
    128c:	38c00c16 	blt	r7,r3,12c0 <timer_isr+0x104>
					sec1 = 0;
    1290:	d0200815 	stw	zero,-32736(gp)
					*seg1 = data[sec1];
    1294:	28800015 	stw	r2,0(r5)
					sec0 = 0;
    1298:	d0200a15 	stw	zero,-32728(gp)
					*seg0 = data[sec0];
    129c:	20800015 	stw	r2,0(r4)
					min0 ++;
    12a0:	18800044 	addi	r2,r3,1
    12a4:	d0a00915 	stw	r2,-32732(gp)
					*seg2 = data[min0];
    12a8:	1085883a 	add	r2,r2,r2
    12ac:	1085883a 	add	r2,r2,r2
    12b0:	d885883a 	add	r2,sp,r2
    12b4:	10c00017 	ldw	r3,0(r2)
    12b8:	008c2404 	movi	r2,12432
    12bc:	00005706 	br	141c <timer_isr+0x260>
			}else{
				if(min1<5){
    12c0:	d0e00717 	ldw	r3,-32740(gp)
    12c4:	30c00f16 	blt	r6,r3,1304 <timer_isr+0x148>
					sec1 = 0;
    12c8:	d0200815 	stw	zero,-32736(gp)
					*seg1 = data[sec1];
    12cc:	28800015 	stw	r2,0(r5)
					sec0 = 0;
    12d0:	d0200a15 	stw	zero,-32728(gp)
					*seg0 = data[sec0];
    12d4:	20800015 	stw	r2,0(r4)
					min0 = 0;
    12d8:	d0200915 	stw	zero,-32732(gp)
					*seg2 = data[min0];
    12dc:	010c2404 	movi	r4,12432
    12e0:	20800015 	stw	r2,0(r4)
					min1 ++;
    12e4:	18800044 	addi	r2,r3,1
    12e8:	d0a00715 	stw	r2,-32740(gp)
					*seg3 = data[min1];
    12ec:	1085883a 	add	r2,r2,r2
    12f0:	1085883a 	add	r2,r2,r2
    12f4:	d885883a 	add	r2,sp,r2
    12f8:	10c00017 	ldw	r3,0(r2)
    12fc:	008c2004 	movi	r2,12416
    1300:	00004606 	br	141c <timer_isr+0x260>
				}else{
					if(hour1 == 2 && hour0 == 3){
    1304:	d0e00617 	ldw	r3,-32744(gp)
    1308:	01800084 	movi	r6,2
    130c:	1980141e 	bne	r3,r6,1360 <timer_isr+0x1a4>
    1310:	d1e00b17 	ldw	r7,-32724(gp)
    1314:	018000c4 	movi	r6,3
    1318:	3980111e 	bne	r7,r6,1360 <timer_isr+0x1a4>
						sec1 = 0;
    131c:	d0200815 	stw	zero,-32736(gp)
						*seg1 = data[sec1];
    1320:	28800015 	stw	r2,0(r5)
						sec0 = 0;
    1324:	d0200a15 	stw	zero,-32728(gp)
						*seg0 = data[sec0];
    1328:	20800015 	stw	r2,0(r4)
						min0 = 0;
    132c:	d0200915 	stw	zero,-32732(gp)
						*seg2 = data[min0];
    1330:	00cc2404 	movi	r3,12432
    1334:	18800015 	stw	r2,0(r3)
						min1 = 0;
    1338:	d0200715 	stw	zero,-32740(gp)
						*seg3 = data[min1];
    133c:	00cc2004 	movi	r3,12416
    1340:	18800015 	stw	r2,0(r3)
						hour0 = 0;
    1344:	d0200b15 	stw	zero,-32724(gp)
						*seg4 = data[hour0];
    1348:	00cc1c04 	movi	r3,12400
    134c:	18800015 	stw	r2,0(r3)
						hour1 = 0;
    1350:	d0200615 	stw	zero,-32744(gp)
						*seg5 = data[hour1];
    1354:	00cc1804 	movi	r3,12384
    1358:	18800015 	stw	r2,0(r3)
    135c:	00003006 	br	1420 <timer_isr+0x264>

					}else{
						if((hour1 == 0||hour1 == 1) && hour0 == 9){
    1360:	01400044 	movi	r5,1
    1364:	010c2804 	movi	r4,12448
    1368:	28c01936 	bltu	r5,r3,13d0 <timer_isr+0x214>
    136c:	d1a00b17 	ldw	r6,-32724(gp)
    1370:	01400244 	movi	r5,9
    1374:	3140161e 	bne	r6,r5,13d0 <timer_isr+0x214>
							sec1 = 0;
    1378:	d0200815 	stw	zero,-32736(gp)
							*seg1 = data[sec1];
    137c:	20800015 	stw	r2,0(r4)
							sec0 = 0;
    1380:	d0200a15 	stw	zero,-32728(gp)
							*seg0 = data[sec0];
    1384:	010c2c04 	movi	r4,12464
    1388:	20800015 	stw	r2,0(r4)
							min0 = 0;
    138c:	d0200915 	stw	zero,-32732(gp)
							*seg2 = data[min0];
    1390:	010c2404 	movi	r4,12432
    1394:	20800015 	stw	r2,0(r4)
							min1 = 0;
    1398:	d0200715 	stw	zero,-32740(gp)
							*seg3 = data[min1];
    139c:	010c2004 	movi	r4,12416
    13a0:	20800015 	stw	r2,0(r4)
							hour0 = 0;
    13a4:	d0200b15 	stw	zero,-32724(gp)
							*seg4 = data[hour0];
    13a8:	010c1c04 	movi	r4,12400
    13ac:	20800015 	stw	r2,0(r4)
							hour1 ++;
    13b0:	18800044 	addi	r2,r3,1
    13b4:	d0a00615 	stw	r2,-32744(gp)
							*seg5 = data[hour1];
    13b8:	1085883a 	add	r2,r2,r2
    13bc:	1085883a 	add	r2,r2,r2
    13c0:	d885883a 	add	r2,sp,r2
    13c4:	10c00017 	ldw	r3,0(r2)
    13c8:	008c1804 	movi	r2,12384
    13cc:	00001306 	br	141c <timer_isr+0x260>
						}else{
							sec1 = 0;
    13d0:	d0200815 	stw	zero,-32736(gp)
							*seg1 = data[sec1];
    13d4:	20800015 	stw	r2,0(r4)
							sec0 = 0;
    13d8:	d0200a15 	stw	zero,-32728(gp)
							*seg0 = data[sec0];
    13dc:	00cc2c04 	movi	r3,12464
    13e0:	18800015 	stw	r2,0(r3)
							min0 = 0;
    13e4:	d0200915 	stw	zero,-32732(gp)
							*seg2 = data[min0];
    13e8:	00cc2404 	movi	r3,12432
    13ec:	18800015 	stw	r2,0(r3)
							min1 = 0;
    13f0:	d0200715 	stw	zero,-32740(gp)
							*seg3 = data[min1];
    13f4:	00cc2004 	movi	r3,12416
    13f8:	18800015 	stw	r2,0(r3)
							hour0 ++;
    13fc:	d0a00b17 	ldw	r2,-32724(gp)
    1400:	10800044 	addi	r2,r2,1
    1404:	d0a00b15 	stw	r2,-32724(gp)
							*seg4 = data[hour0];
    1408:	1085883a 	add	r2,r2,r2
    140c:	1085883a 	add	r2,r2,r2
    1410:	d885883a 	add	r2,sp,r2
    1414:	10c00017 	ldw	r3,0(r2)
    1418:	008c1c04 	movi	r2,12400
    141c:	10c00015 	stw	r3,0(r2)
				}
			}
		}
	}

		count++;
    1420:	d0a00417 	ldw	r2,-32752(gp)
    1424:	10800044 	addi	r2,r2,1
    1428:	d0a00415 	stw	r2,-32752(gp)

}
    142c:	dfc00a17 	ldw	ra,40(sp)
    1430:	dec00b04 	addi	sp,sp,44
    1434:	f800283a 	ret

00001438 <main>:

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    1438:	01000034 	movhi	r4,0
		count++;

}

int main()
{ 
    143c:	defffe04 	addi	sp,sp,-8
  alt_putstr("Hello from Nios II!\n");
    1440:	21068904 	addi	r4,r4,6692
		count++;

}

int main()
{ 
    1444:	dfc00115 	stw	ra,4(sp)
  alt_putstr("Hello from Nios II!\n");
    1448:	00018cc0 	call	18cc <alt_putstr>
	volatile unsigned long * seg2= (short *) 0x3090;
	volatile unsigned long * seg3= (short *) 0x3080;
	volatile unsigned long * seg4= (short *) 0x3070;
	volatile unsigned long * seg5= (short *) 0x3060;

	*seg0 = 1000000;
    144c:	008003f4 	movhi	r2,15
    1450:	10909004 	addi	r2,r2,16960
    1454:	00cc2c04 	movi	r3,12464
    1458:	18800015 	stw	r2,0(r3)
	*seg1 = 1000000;
    145c:	020c2804 	movi	r8,12448
    1460:	40800015 	stw	r2,0(r8)
	*seg2 = 1000000;
    1464:	01cc2404 	movi	r7,12432
    1468:	38800015 	stw	r2,0(r7)
	*seg3 = 1000000;
    146c:	014c2004 	movi	r5,12416
    1470:	28800015 	stw	r2,0(r5)
	*seg4 = 1000000;
    1474:	010c1c04 	movi	r4,12400
    1478:	20800015 	stw	r2,0(r4)
	*seg5 = 1000000;
    147c:	00cc1804 	movi	r3,12384
    1480:	18800015 	stw	r2,0(r3)


	sec1=5;
	min0=9;
    1484:	00800244 	movi	r2,9
    1488:	d0a00915 	stw	r2,-32732(gp)
	min1=5;
	hour0=9;
    148c:	d0a00b15 	stw	r2,-32724(gp)
	*seg3 = 1000000;
	*seg4 = 1000000;
	*seg5 = 1000000;


	sec1=5;
    1490:	01800144 	movi	r6,5
	min0=9;
	min1=5;
	hour0=9;
	hour1=1;
    1494:	00800044 	movi	r2,1
	*seg3 = 1000000;
	*seg4 = 1000000;
	*seg5 = 1000000;


	sec1=5;
    1498:	d1a00815 	stw	r6,-32736(gp)
	min0=9;
	min1=5;
    149c:	d1a00715 	stw	r6,-32740(gp)
	hour0=9;
	hour1=1;
    14a0:	d0a00615 	stw	r2,-32744(gp)

	*seg1 = 18;
    14a4:	01800484 	movi	r6,18
    14a8:	41800015 	stw	r6,0(r8)
	*seg2 = 16;
    14ac:	00800404 	movi	r2,16
    14b0:	38800015 	stw	r2,0(r7)
	*seg3 = 18;
    14b4:	29800015 	stw	r6,0(r5)
	*seg4 = 16;
    14b8:	20800015 	stw	r2,0(r4)
	*seg5 = 79;
    14bc:	008013c4 	movi	r2,79
    14c0:	18800015 	stw	r2,0(r3)
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  initial_timer();

  alt_ic_isr_register(
    14c4:	01800034 	movhi	r6,0
    14c8:	d8000015 	stw	zero,0(sp)
    14cc:	000f883a 	mov	r7,zero
    14d0:	31846f04 	addi	r6,r6,4540
    14d4:	01400104 	movi	r5,4
    14d8:	0009883a 	mov	r4,zero
    14dc:	00016cc0 	call	16cc <alt_ic_isr_register>
		  TIMER_0_IRQ,
		  timer_isr,
		  NULL,
		  NULL);

  IOWR_ALTERA_AVALON_TIMER_CONTROL(
    14e0:	008c0904 	movi	r2,12324
    14e4:	00c000c4 	movi	r3,3
    14e8:	10c00035 	stwio	r3,0(r2)
    14ec:	003fff06 	br	14ec <main+0xb4>

000014f0 <__divsi3>:
    14f0:	20001b16 	blt	r4,zero,1560 <__divsi3+0x70>
    14f4:	000f883a 	mov	r7,zero
    14f8:	28001616 	blt	r5,zero,1554 <__divsi3+0x64>
    14fc:	200d883a 	mov	r6,r4
    1500:	29001a2e 	bgeu	r5,r4,156c <__divsi3+0x7c>
    1504:	00800804 	movi	r2,32
    1508:	00c00044 	movi	r3,1
    150c:	00000106 	br	1514 <__divsi3+0x24>
    1510:	10000d26 	beq	r2,zero,1548 <__divsi3+0x58>
    1514:	294b883a 	add	r5,r5,r5
    1518:	10bfffc4 	addi	r2,r2,-1
    151c:	18c7883a 	add	r3,r3,r3
    1520:	293ffb36 	bltu	r5,r4,1510 <__divsi3+0x20>
    1524:	0005883a 	mov	r2,zero
    1528:	18000726 	beq	r3,zero,1548 <__divsi3+0x58>
    152c:	0005883a 	mov	r2,zero
    1530:	31400236 	bltu	r6,r5,153c <__divsi3+0x4c>
    1534:	314dc83a 	sub	r6,r6,r5
    1538:	10c4b03a 	or	r2,r2,r3
    153c:	1806d07a 	srli	r3,r3,1
    1540:	280ad07a 	srli	r5,r5,1
    1544:	183ffa1e 	bne	r3,zero,1530 <__divsi3+0x40>
    1548:	38000126 	beq	r7,zero,1550 <__divsi3+0x60>
    154c:	0085c83a 	sub	r2,zero,r2
    1550:	f800283a 	ret
    1554:	014bc83a 	sub	r5,zero,r5
    1558:	39c0005c 	xori	r7,r7,1
    155c:	003fe706 	br	14fc <__divsi3+0xc>
    1560:	0109c83a 	sub	r4,zero,r4
    1564:	01c00044 	movi	r7,1
    1568:	003fe306 	br	14f8 <__divsi3+0x8>
    156c:	00c00044 	movi	r3,1
    1570:	003fee06 	br	152c <__divsi3+0x3c>

00001574 <__modsi3>:
    1574:	20001716 	blt	r4,zero,15d4 <__modsi3+0x60>
    1578:	000f883a 	mov	r7,zero
    157c:	2005883a 	mov	r2,r4
    1580:	28001216 	blt	r5,zero,15cc <__modsi3+0x58>
    1584:	2900162e 	bgeu	r5,r4,15e0 <__modsi3+0x6c>
    1588:	01800804 	movi	r6,32
    158c:	00c00044 	movi	r3,1
    1590:	00000106 	br	1598 <__modsi3+0x24>
    1594:	30000a26 	beq	r6,zero,15c0 <__modsi3+0x4c>
    1598:	294b883a 	add	r5,r5,r5
    159c:	31bfffc4 	addi	r6,r6,-1
    15a0:	18c7883a 	add	r3,r3,r3
    15a4:	293ffb36 	bltu	r5,r4,1594 <__modsi3+0x20>
    15a8:	18000526 	beq	r3,zero,15c0 <__modsi3+0x4c>
    15ac:	1806d07a 	srli	r3,r3,1
    15b0:	11400136 	bltu	r2,r5,15b8 <__modsi3+0x44>
    15b4:	1145c83a 	sub	r2,r2,r5
    15b8:	280ad07a 	srli	r5,r5,1
    15bc:	183ffb1e 	bne	r3,zero,15ac <__modsi3+0x38>
    15c0:	38000126 	beq	r7,zero,15c8 <__modsi3+0x54>
    15c4:	0085c83a 	sub	r2,zero,r2
    15c8:	f800283a 	ret
    15cc:	014bc83a 	sub	r5,zero,r5
    15d0:	003fec06 	br	1584 <__modsi3+0x10>
    15d4:	0109c83a 	sub	r4,zero,r4
    15d8:	01c00044 	movi	r7,1
    15dc:	003fe706 	br	157c <__modsi3+0x8>
    15e0:	00c00044 	movi	r3,1
    15e4:	003ff106 	br	15ac <__modsi3+0x38>

000015e8 <__udivsi3>:
    15e8:	200d883a 	mov	r6,r4
    15ec:	2900152e 	bgeu	r5,r4,1644 <__udivsi3+0x5c>
    15f0:	28001416 	blt	r5,zero,1644 <__udivsi3+0x5c>
    15f4:	00800804 	movi	r2,32
    15f8:	00c00044 	movi	r3,1
    15fc:	00000206 	br	1608 <__udivsi3+0x20>
    1600:	10000e26 	beq	r2,zero,163c <__udivsi3+0x54>
    1604:	28000516 	blt	r5,zero,161c <__udivsi3+0x34>
    1608:	294b883a 	add	r5,r5,r5
    160c:	10bfffc4 	addi	r2,r2,-1
    1610:	18c7883a 	add	r3,r3,r3
    1614:	293ffa36 	bltu	r5,r4,1600 <__udivsi3+0x18>
    1618:	18000826 	beq	r3,zero,163c <__udivsi3+0x54>
    161c:	0005883a 	mov	r2,zero
    1620:	31400236 	bltu	r6,r5,162c <__udivsi3+0x44>
    1624:	314dc83a 	sub	r6,r6,r5
    1628:	10c4b03a 	or	r2,r2,r3
    162c:	1806d07a 	srli	r3,r3,1
    1630:	280ad07a 	srli	r5,r5,1
    1634:	183ffa1e 	bne	r3,zero,1620 <__udivsi3+0x38>
    1638:	f800283a 	ret
    163c:	0005883a 	mov	r2,zero
    1640:	f800283a 	ret
    1644:	00c00044 	movi	r3,1
    1648:	003ff406 	br	161c <__udivsi3+0x34>

0000164c <__umodsi3>:
    164c:	2005883a 	mov	r2,r4
    1650:	2900122e 	bgeu	r5,r4,169c <__umodsi3+0x50>
    1654:	28001116 	blt	r5,zero,169c <__umodsi3+0x50>
    1658:	01800804 	movi	r6,32
    165c:	00c00044 	movi	r3,1
    1660:	00000206 	br	166c <__umodsi3+0x20>
    1664:	30000c26 	beq	r6,zero,1698 <__umodsi3+0x4c>
    1668:	28000516 	blt	r5,zero,1680 <__umodsi3+0x34>
    166c:	294b883a 	add	r5,r5,r5
    1670:	31bfffc4 	addi	r6,r6,-1
    1674:	18c7883a 	add	r3,r3,r3
    1678:	293ffa36 	bltu	r5,r4,1664 <__umodsi3+0x18>
    167c:	18000626 	beq	r3,zero,1698 <__umodsi3+0x4c>
    1680:	1806d07a 	srli	r3,r3,1
    1684:	11400136 	bltu	r2,r5,168c <__umodsi3+0x40>
    1688:	1145c83a 	sub	r2,r2,r5
    168c:	280ad07a 	srli	r5,r5,1
    1690:	183ffb1e 	bne	r3,zero,1680 <__umodsi3+0x34>
    1694:	f800283a 	ret
    1698:	f800283a 	ret
    169c:	00c00044 	movi	r3,1
    16a0:	003ff706 	br	1680 <__umodsi3+0x34>

000016a4 <memcpy>:
    16a4:	2005883a 	mov	r2,r4
    16a8:	2007883a 	mov	r3,r4
    16ac:	218d883a 	add	r6,r4,r6
    16b0:	19800526 	beq	r3,r6,16c8 <memcpy+0x24>
    16b4:	29000003 	ldbu	r4,0(r5)
    16b8:	18c00044 	addi	r3,r3,1
    16bc:	29400044 	addi	r5,r5,1
    16c0:	193fffc5 	stb	r4,-1(r3)
    16c4:	003ffa06 	br	16b0 <memcpy+0xc>
    16c8:	f800283a 	ret

000016cc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    16cc:	00017581 	jmpi	1758 <alt_iic_isr_register>

000016d0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16d4:	00bfff84 	movi	r2,-2
    16d8:	2084703a 	and	r2,r4,r2
    16dc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    16e0:	00c00044 	movi	r3,1
    16e4:	d0a00c17 	ldw	r2,-32720(gp)
    16e8:	194a983a 	sll	r5,r3,r5
    16ec:	288ab03a 	or	r5,r5,r2
    16f0:	d1600c15 	stw	r5,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    16f4:	d0a00c17 	ldw	r2,-32720(gp)
    16f8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16fc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    1700:	0005883a 	mov	r2,zero
    1704:	f800283a 	ret

00001708 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1708:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    170c:	00bfff84 	movi	r2,-2
    1710:	2084703a 	and	r2,r4,r2
    1714:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1718:	00ffff84 	movi	r3,-2
    171c:	d0a00c17 	ldw	r2,-32720(gp)
    1720:	194a183a 	rol	r5,r3,r5
    1724:	288a703a 	and	r5,r5,r2
    1728:	d1600c15 	stw	r5,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    172c:	d0a00c17 	ldw	r2,-32720(gp)
    1730:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1734:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    1738:	0005883a 	mov	r2,zero
    173c:	f800283a 	ret

00001740 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1740:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1744:	00800044 	movi	r2,1
    1748:	1144983a 	sll	r2,r2,r5
    174c:	10c4703a 	and	r2,r2,r3
}
    1750:	1004c03a 	cmpne	r2,r2,zero
    1754:	f800283a 	ret

00001758 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1758:	00c007c4 	movi	r3,31
    175c:	19401616 	blt	r3,r5,17b8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1760:	defffe04 	addi	sp,sp,-8
    1764:	dfc00115 	stw	ra,4(sp)
    1768:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    176c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1770:	00ffff84 	movi	r3,-2
    1774:	80c6703a 	and	r3,r16,r3
    1778:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    177c:	280490fa 	slli	r2,r5,3
    1780:	00c00034 	movhi	r3,0
    1784:	18c6a004 	addi	r3,r3,6784
    1788:	1885883a 	add	r2,r3,r2
    178c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    1790:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1794:	30000226 	beq	r6,zero,17a0 <alt_iic_isr_register+0x48>
    1798:	00016d00 	call	16d0 <alt_ic_irq_enable>
    179c:	00000106 	br	17a4 <alt_iic_isr_register+0x4c>
    17a0:	00017080 	call	1708 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17a4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    17a8:	dfc00117 	ldw	ra,4(sp)
    17ac:	dc000017 	ldw	r16,0(sp)
    17b0:	dec00204 	addi	sp,sp,8
    17b4:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    17b8:	00bffa84 	movi	r2,-22
    17bc:	f800283a 	ret

000017c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    17c0:	deffff04 	addi	sp,sp,-4
    17c4:	01000034 	movhi	r4,0
    17c8:	01400034 	movhi	r5,0
    17cc:	dfc00015 	stw	ra,0(sp)
    17d0:	21068f04 	addi	r4,r4,6716
    17d4:	29469104 	addi	r5,r5,6724

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    17d8:	2140061e 	bne	r4,r5,17f4 <alt_load+0x34>
    17dc:	01000034 	movhi	r4,0
    17e0:	01400034 	movhi	r5,0
    17e4:	21040804 	addi	r4,r4,4128
    17e8:	29440804 	addi	r5,r5,4128
    17ec:	2140121e 	bne	r4,r5,1838 <alt_load+0x78>
    17f0:	00000b06 	br	1820 <alt_load+0x60>
    17f4:	00c00034 	movhi	r3,0
    17f8:	18c69104 	addi	r3,r3,6724
    17fc:	1907c83a 	sub	r3,r3,r4
    1800:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1804:	10fff526 	beq	r2,r3,17dc <alt_load+0x1c>
    {
      *to++ = *from++;
    1808:	114f883a 	add	r7,r2,r5
    180c:	39c00017 	ldw	r7,0(r7)
    1810:	110d883a 	add	r6,r2,r4
    1814:	10800104 	addi	r2,r2,4
    1818:	31c00015 	stw	r7,0(r6)
    181c:	003ff906 	br	1804 <alt_load+0x44>
    1820:	01000034 	movhi	r4,0
    1824:	01400034 	movhi	r5,0
    1828:	21067f04 	addi	r4,r4,6652
    182c:	29467f04 	addi	r5,r5,6652

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1830:	2140101e 	bne	r4,r5,1874 <alt_load+0xb4>
    1834:	00000b06 	br	1864 <alt_load+0xa4>
    1838:	00c00034 	movhi	r3,0
    183c:	18c46004 	addi	r3,r3,4480
    1840:	1907c83a 	sub	r3,r3,r4
    1844:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1848:	10fff526 	beq	r2,r3,1820 <alt_load+0x60>
    {
      *to++ = *from++;
    184c:	114f883a 	add	r7,r2,r5
    1850:	39c00017 	ldw	r7,0(r7)
    1854:	110d883a 	add	r6,r2,r4
    1858:	10800104 	addi	r2,r2,4
    185c:	31c00015 	stw	r7,0(r6)
    1860:	003ff906 	br	1848 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1864:	000195c0 	call	195c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1868:	dfc00017 	ldw	ra,0(sp)
    186c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1870:	00019601 	jmpi	1960 <alt_icache_flush_all>
    1874:	00c00034 	movhi	r3,0
    1878:	18c68f04 	addi	r3,r3,6716
    187c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1880:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1884:	18bff726 	beq	r3,r2,1864 <alt_load+0xa4>
    {
      *to++ = *from++;
    1888:	114f883a 	add	r7,r2,r5
    188c:	39c00017 	ldw	r7,0(r7)
    1890:	110d883a 	add	r6,r2,r4
    1894:	10800104 	addi	r2,r2,4
    1898:	31c00015 	stw	r7,0(r6)
    189c:	003ff906 	br	1884 <alt_load+0xc4>

000018a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    18a0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    18a4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    18a8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    18ac:	00019040 	call	1904 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    18b0:	00019240 	call	1924 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    18b4:	d1a00d17 	ldw	r6,-32716(gp)
    18b8:	d1600e17 	ldw	r5,-32712(gp)
    18bc:	d1200f17 	ldw	r4,-32708(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    18c0:	dfc00017 	ldw	ra,0(sp)
    18c4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    18c8:	00014381 	jmpi	1438 <main>

000018cc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    18cc:	defffe04 	addi	sp,sp,-8
    18d0:	dc000015 	stw	r16,0(sp)
    18d4:	dfc00115 	stw	ra,4(sp)
    18d8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    18dc:	00019e00 	call	19e0 <strlen>
    18e0:	01000034 	movhi	r4,0
    18e4:	000f883a 	mov	r7,zero
    18e8:	100d883a 	mov	r6,r2
    18ec:	800b883a 	mov	r5,r16
    18f0:	21069004 	addi	r4,r4,6720
#else
    return fputs(str, stdout);
#endif
#endif
}
    18f4:	dfc00117 	ldw	ra,4(sp)
    18f8:	dc000017 	ldw	r16,0(sp)
    18fc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1900:	00019281 	jmpi	1928 <altera_avalon_jtag_uart_write>

00001904 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1904:	deffff04 	addi	sp,sp,-4
    1908:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU1, CPU1);
    190c:	00019d80 	call	19d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1910:	00800044 	movi	r2,1
    1914:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1918:	dfc00017 	ldw	ra,0(sp)
    191c:	dec00104 	addi	sp,sp,4
    1920:	f800283a 	ret

00001924 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1924:	f800283a 	ret

00001928 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1928:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    192c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1930:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1934:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1938:	2980072e 	bgeu	r5,r6,1958 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    193c:	38c00037 	ldwio	r3,0(r7)
    1940:	18ffffec 	andhi	r3,r3,65535
    1944:	183ffc26 	beq	r3,zero,1938 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1948:	28c00007 	ldb	r3,0(r5)
    194c:	20c00035 	stwio	r3,0(r4)
    1950:	29400044 	addi	r5,r5,1
    1954:	003ff806 	br	1938 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    1958:	f800283a 	ret

0000195c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    195c:	f800283a 	ret

00001960 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1960:	f800283a 	ret

00001964 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1964:	213ffe84 	addi	r4,r4,-6
    1968:	008003c4 	movi	r2,15
    196c:	11001636 	bltu	r2,r4,19c8 <alt_exception_cause_generated_bad_addr+0x64>
    1970:	200890ba 	slli	r4,r4,2
    1974:	00800034 	movhi	r2,0
    1978:	10866204 	addi	r2,r2,6536
    197c:	2089883a 	add	r4,r4,r2
    1980:	20800017 	ldw	r2,0(r4)
    1984:	1000683a 	jmp	r2
    1988:	000019d0 	cmplti	zero,zero,103
    198c:	000019d0 	cmplti	zero,zero,103
    1990:	000019c8 	cmpgei	zero,zero,103
    1994:	000019c8 	cmpgei	zero,zero,103
    1998:	000019c8 	cmpgei	zero,zero,103
    199c:	000019d0 	cmplti	zero,zero,103
    19a0:	000019c8 	cmpgei	zero,zero,103
    19a4:	000019c8 	cmpgei	zero,zero,103
    19a8:	000019d0 	cmplti	zero,zero,103
    19ac:	000019d0 	cmplti	zero,zero,103
    19b0:	000019c8 	cmpgei	zero,zero,103
    19b4:	000019d0 	cmplti	zero,zero,103
    19b8:	000019c8 	cmpgei	zero,zero,103
    19bc:	000019c8 	cmpgei	zero,zero,103
    19c0:	000019c8 	cmpgei	zero,zero,103
    19c4:	000019d0 	cmplti	zero,zero,103
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    19c8:	0005883a 	mov	r2,zero
    19cc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    19d0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    19d4:	f800283a 	ret

000019d8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    19d8:	000170fa 	wrctl	ienable,zero
    19dc:	f800283a 	ret

000019e0 <strlen>:
    19e0:	2005883a 	mov	r2,r4
    19e4:	10c00007 	ldb	r3,0(r2)
    19e8:	18000226 	beq	r3,zero,19f4 <strlen+0x14>
    19ec:	10800044 	addi	r2,r2,1
    19f0:	003ffc06 	br	19e4 <strlen+0x4>
    19f4:	1105c83a 	sub	r2,r2,r4
    19f8:	f800283a 	ret
